name: Build and Release Tesseract with R 4.4

on:
  workflow_dispatch:
    inputs:
      package:
        description: 'Build tesseract for R 4.4'
        required: true
      overwrite:
        description: 'Overwrite existing bundles'
        type: boolean
        required: false
        default: false

jobs:
  Bundler:
    runs-on: windows-latest
    name: Bundle ${{ github.event.inputs.package }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare git
        run: |
          git config --global core.autocrlf false
          git config --global user.email 'm.sepulveda@mail.utoronto.ca'
          git config --global user.name  'Mauricio Pacha Vargas Sepulveda'

      - uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            git
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-autotools
            mingw-w64-x86_64-leptonica
            mingw-w64-x86_64-libpng
            mingw-w64-x86_64-libjpeg-turbo
            mingw-w64-x86_64-libtiff
            mingw-w64-x86_64-zlib
            mingw-w64-x86_64-giflib
            mingw-w64-x86_64-libwebp
            mingw-w64-x86_64-openjpeg2

      - name: Create CRAN-compliant headers
        shell: msys2 {0}
        run: |
          mkdir -p build
          
          # Create redirection header
          cat > build/r_redirects.h << 'EOF'
          #ifndef R_REDIRECTS_H
          #define R_REDIRECTS_H

          #include <cstdlib>
          #include <string>
          #include <iostream>
          #include <streambuf>
          #include <random>
          #include <cstdint>  // Add this for int32_t, uint64_t etc.

          // Custom stream buffer that silently discards output
          class NullStreambuf : public std::streambuf {
          protected:
            virtual int overflow(int c) override { return c; }
            virtual std::streamsize xsputn(const char*, std::streamsize n) override { return n; }
          public:
            static NullStreambuf& instance() {
              static NullStreambuf instance;
              return instance;
            }
          };

          // Safe random number generator
          static std::mt19937 safe_random_generator(0);
          static std::uniform_int_distribution<int> safe_random_dist(0, RAND_MAX);

          // Replace cout and cerr with null streams
          namespace std {
            static std::ostream safe_cout(&NullStreambuf::instance());
            static std::ostream safe_cerr(&NullStreambuf::instance());
          }

          // Function replacements
          extern "C" {
            // Empty abort implementation with noreturn attribute
            __attribute__((noreturn)) void abort(void) { 
              while(1) {} // Infinite loop to satisfy noreturn
            }
            
            // Empty exit implementation with noreturn attribute
            __attribute__((noreturn)) void exit(int status) { 
              while(1) {} // Infinite loop to satisfy noreturn
            }
            
            // Safe random generator
            int rand(void) { return safe_random_dist(safe_random_generator); }
            
            // Safe random seed
            void srand(unsigned int seed) { safe_random_generator.seed(seed); }
          }

          // Redirect standard streams via macros
          #define cout std::safe_cout
          #define cerr std::safe_cerr

          #endif // R_REDIRECTS_H
          EOF

          # Create a separate override file that will be compiled and linked
          cat > build/r_override.cpp << 'EOF'
          #include "r_redirects.h"
          EOF

      - name: Download Tesseract source
        shell: msys2 {0}
        run: |
          cd build
          
          # Clone the repository
          echo "Cloning Tesseract repository..."
          git clone https://github.com/tesseract-ocr/tesseract.git
          
          # Check if the clone was successful
          if [ ! -d "tesseract" ]; then
            echo "ERROR: Failed to clone Tesseract repository"
            exit 1
          fi
          
          cd tesseract
          
          # Checkout latest Tesseract version (5.5.0)
          echo "Checking out Tesseract 5.5.0..."
          git checkout 5.5.0
          
          # Run autogen.sh first to generate build files
          echo "Running autogen.sh to generate build files..."
          ./autogen.sh
          
          echo "Tesseract source code downloaded successfully"

      - name: Apply CRAN-compliant modifications
        shell: msys2 {0}
        run: |
          cd build/tesseract
          
          # Copy redirection header and override to source
          cp ../r_redirects.h src/ccutil/
          cp ../r_override.cpp src/ccutil/
          
          # Add our override file to the build
          sed -i '/^libtesseract_la_SOURCES/a\
          libtesseract_la_SOURCES += ccutil/r_override.cpp' src/api/Makefile.am
          
          # Modify a central header to include our redirections
          if [ -f "src/ccutil/platform.h" ]; then
            sed -i '1i#include "r_redirects.h"' src/ccutil/platform.h
          else
            # Find another suitable header file
            for header in src/ccutil/host.h src/ccutil/params.h src/ccutil/unicharmap.h; do
              if [ -f "$header" ]; then
                echo "Using $header for redirection includes"
                sed -i '1i#include "r_redirects.h"' "$header"
                break
              fi
            done
          fi
          
          # Make sure cstdint is included in helpers.h if it exists
          if [ -f "src/ccutil/helpers.h" ]; then
            if ! grep -q "#include <cstdint>" src/ccutil/helpers.h; then
              sed -i '/#include <string>/a#include <cstdint>' src/ccutil/helpers.h
            fi
          fi
          
          # Run autoconf again
          ./autogen.sh

      - name: Build Tesseract with CRAN-compliant flags
        shell: msys2 {0}
        run: |
          # Create install directory
          mkdir -p build/install/lib build/install/include build/install/share
          
          # Build with visibility flags and CRAN-compliant settings
          cd build/tesseract
          ./configure --prefix=$GITHUB_WORKSPACE/build/install \
                      --disable-shared \
                      --enable-static \
                      --disable-openmp \
                      CXXFLAGS="-fvisibility=hidden -fvisibility-inlines-hidden -DUSE_STD_NAMESPACE -DLEPTONICA_INTERNAL" \
                      CFLAGS="-fvisibility=hidden -DLEPTONICA_INTERNAL"
          
          make -j4
          make install

      - name: Download language data
        shell: msys2 {0}
        run: |
          mkdir -p build/install/share/tessdata
          cd build/install/share/tessdata
          
          # Download English and orientation detection data
          curl -L -o eng.traineddata https://github.com/tesseract-ocr/tessdata_best/raw/main/eng.traineddata
          curl -L -o osd.traineddata https://github.com/tesseract-ocr/tessdata_best/raw/main/osd.traineddata

      - name: Strip problematic symbols
        shell: msys2 {0}
        run: |
          cd build/install/lib
          
          # Create an exports file with only the symbols we want to expose
          echo "EXPORTS" > tesseract.def
          
          # Process all libraries to strip problematic symbols
          for lib in *.a; do
            echo "Processing $lib"
            # Use objcopy to hide problematic symbols
            objcopy --localize-symbol=_ZSt4cout --localize-symbol=_ZSt4cerr \
                    --localize-symbol=abort --localize-symbol=exit \
                    --localize-symbol=rand --localize-symbol=srand "$lib" "$lib.new"
            mv "$lib.new" "$lib"
          done

      - name: Package Tesseract
        shell: msys2 {0}
        run: |
          mkdir -p dist
          cd build
          
          # Create package
          tar -czvf ../dist/tesseract-oldR-5.5.0.tar.gz install/

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: tesseract-oldR-5.5.0
          name: Tesseract 5.5.0 with R 4.4
          draft: false
          prerelease: false
          files: dist/tesseract-oldR-5.5.0.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        